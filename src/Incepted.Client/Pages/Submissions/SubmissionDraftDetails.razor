@page "/your-submissions/{dealId:guid}"

@using Incepted.Client.Services
@using System.Collections.Immutable
@using System.Text
@using KellermanSoftware.CompareNetObjects

@inject ISnackbar Snackbar
@inject HttpClient Http
@inject IDealFileService DealFiles
@inject IDialogService DialogService

@attribute [Authorize(Roles = "Broker")]

@if (_hasError)
{
    <div class="d-flex justify-center">
        <MudStack AlignItems="AlignItems.Center" Spacing="8">
            <MudIcon Icon="@Icons.Outlined.ErrorOutline" Style="font-size: 6rem;" Color="Color.Primary" />
            <MudText Typo="Typo.h6">Oops, could not load the deal details</MudText>
            <MudText Typo="Typo.body1">Please refresh the page, or contact Incepted support if the problem persists</MudText>
        </MudStack>
    </div>
}
else if (_loading)
{
    <div class="d-flex justify-center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate />
    </div>
}
else
{
    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="my-8">
        <div>
            <MudButton Variant="Variant.Text"
                   Size="Size.Large"
                   Style="@($"text-transform:none; {GetButtonBackGroundColor("terms")}")"
                   Color="@GetButtonColor("terms")"
                   OnClick="@(() => _visibleTab = "terms")"
                   Class="mr-3">
                Basic terms
            </MudButton>
            <MudButton Variant="Variant.Text"
                   Size="Size.Large"
                   Style="@($"text-transform:none; {GetButtonBackGroundColor("pricing")}")"
                   Color="@GetButtonColor("pricing")"
                   OnClick="@(() => _visibleTab = "pricing")"
                   Class="mr-3">
                Pricing details
            </MudButton>
            <MudButton Variant="Variant.Text"
                   Size="Size.Large"
                   Style="@($"text-transform:none; {GetButtonBackGroundColor("enhancements")}")"
                   Color="@GetButtonColor("enhancements")"
                   OnClick="@(() => _visibleTab = "enhancements")"
                   Class="mr-3">
                Enhancements
            </MudButton>
            <MudButton Variant="Variant.Text"
                   Size="Size.Large"
                   Style="@($"text-transform:none; {GetButtonBackGroundColor("warranties")}")"
                   Color="@GetButtonColor("warranties")"
                   OnClick="@(() => _visibleTab = "warranties")">
                Warranties
            </MudButton>
        </div>
        <div>
            <MudInceptedButton id="assign"
                           StartIcon="@Icons.Outlined.People"
                           IsPrimary="false"
                           OnClickCallback="@(() => OpenAssignDialog())"
                           Class="mr-4">
                Assign
            </MudInceptedButton>
            <MudInceptedButton id="submitDeal"                           
                           IsPrimary
                           OnClickCallback="OpenSubmitDealDialog">
                @(_deal.IsSubmittedToInsurers ? "Modify" : "Submit")
            </MudInceptedButton>
        </div>
    </MudStack>
        
    <MudStack Row AlignItems="AlignItems.End">
        <MudText Typo="Typo.h5" Style="font-weight: 500" Class="ml-2">@_deal.Name</MudText>
        @if (_deal.IsSubmittedToInsurers)
        {
            <MudLink Href="@($"/terms-received/{_deal.Id}")" Typo="Typo.body2">Go to terms received</MudLink>
        }        
    </MudStack>

    @if (_visibleTab == "terms")
    {
        <MudTabs Elevation="0" Class="mt-4 mb-8">
            <MudTabPanel Text="Target business">
                <TabContent>
                    <MudText Typo="Typo.body2">Target business</MudText>
                </TabContent>
                <ChildContent>
                    <MudGrid Class="mt-6 mb-10">
                        <MudItem xs="6">
                            <MudTextField @bind-Value="@_deal.Terms.InsuredAndBuyer"
                                  Variant="Variant.Outlined"
                                  Immediate
                                  Clearable
                                  Label="Insured and buyer" />
                        </MudItem>
                        <MudItem xs="2">
                            <MudSelect @bind-Value="_deal.Terms.InsuredAndBuyerJurisdiction"
                               Variant="Variant.Outlined"
                               Label="Jurisdiction">
                                @foreach (Jurisdiction item in Enum.GetValues(typeof(Jurisdiction)))
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="6">
                            <MudTextField @bind-Value="@_deal.Terms.Target"
                                          Variant="Variant.Outlined"
                                          Clearable
                                          Immediate
                                          Label="Target" />
                        </MudItem>
                        <MudItem xs="2">
                            <MudSelect @bind-Value="_deal.Terms.TargetJurisdiction"
                                       Variant="Variant.Outlined"
                                       Label="Jurisdiction">
                                @foreach (Jurisdiction item in Enum.GetValues(typeof(Jurisdiction)))
                                        {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                        }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="6">
                            <MudTextField @bind-Value="@_deal.Terms.UBO"
                                          Variant="Variant.Outlined"
                                          Clearable
                                          Immediate
                                          Label="Ultimate beneficial owner" />
                        </MudItem>
                        <MudItem xs="2">
                            <MudSelect @bind-Value="_deal.Terms.UBOJurisdiction"
                                       Variant="Variant.Outlined"
                                       Label="Jurisdiction">
                                @foreach (Jurisdiction item in Enum.GetValues(typeof(Jurisdiction)))
                                        {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                        }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="8">
                            <MudTextField @bind-Value="@_deal.Terms.Sellers"
                                          Variant="Variant.Outlined"
                                          Immediate
                                          Clearable
                                          Lines="5"
                                          Label="Seller(s)" />
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="8">
                            <MudSelect @bind-Value="_deal.Terms.Process"
                                       Variant="Variant.Outlined"
                                       Label="Process">
                                @foreach (DealProcess item in Enum.GetValues(typeof(DealProcess)))
                                        {
                                    <MudSelectItem Value="@item">@item.ToString().Replace('_', ' ')</MudSelectItem>
                                        }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="8">
                            <MudAutocomplete @bind-Value="_deal.Terms.Industry"
                                             Variant="Variant.Outlined"
                                             T="string"
                                             Label="Industry"
                                             SearchFunc="@SearchIndustries"
                                             ResetValueOnEmptyText="false"
                                             CoerceText
                                             CoerceValue
                                             AdornmentIcon="@Icons.Material.Filled.Search"
                                             AdornmentColor="Color.Primary" />
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                    </MudGrid>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Text="Parties">
                <TabContent>
                    <MudText Typo="Typo.body2">Parties</MudText>
                </TabContent>
                <ChildContent>
                    <MudGrid Class="mt-6 mb-10">
                        <MudItem xs="8">
                            <MudTextField @bind-Value="@_deal.Terms.TargetShortDescription"
                                          Variant="Variant.Outlined"
                                          Immediate
                                          Clearable
                                          Label="Short description of target business" />
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="8">
                            <MudTextField @bind-Value="@_deal.Terms.FinancialInfo"
                                          Variant="Variant.Outlined"
                                          Immediate
                                          Lines="3"
                                          Clearable
                                          Label="Financial information"
                                          HelperText="Details sucha as revenue, EBITDA"
                                          HelperTextOnFocus />
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="8">
                            <MudTextField @bind-Value="@_deal.Terms.GeographicalFoorprint"
                                          Variant="Variant.Outlined"
                                          Immediate
                                          Clearable
                                          Label="Geographical foorprint" />
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="8">
                            <MudSelect @bind-Value="_deal.Terms.GoverningLaw"
                                       Variant="Variant.Outlined"
                                       Label="Governing law for SPA and policy">
                                @foreach (Jurisdiction item in Enum.GetValues(typeof(Jurisdiction)))
                                        {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                        }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="3">
                            <MudNumericField @bind-Value="_deal.Terms.EmployeesNumber"
                                             Variant="Variant.Outlined"
                                             Label="Number of employees"
                                             HideSpinButtons
                                             Immediate
                                             Min="0"
                                             Step="1" />
                        </MudItem>
                        <MudItem xs="9" /> @*Grid line filler*@
                        <MudItem xs="8">
                            <MudSelect @bind-Value="_deal.Terms.PurchasePriceMechanism"
                                       Variant="Variant.Outlined"
                                       Label="Purchase price mechanism">
                                @foreach (PurchasePriceMechanism item in Enum.GetValues(typeof(PurchasePriceMechanism)))
                                        {
                                    <MudSelectItem Value="@item">@item.ToString().Replace('_', ' ')</MudSelectItem>
                                        }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="8">
                            <MudTextField @bind-Value="@_deal.Terms.InsuredObligations"
                                          Variant="Variant.Outlined"
                                          Immediate
                                          Lines="5"
                                          Clearable
                                          Label="Insured obligations" />
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="4">
                            <MudText>Policy duration for business warranties (months)</MudText>
                        </MudItem>
                        <MudItem xs="4">
                            <MudButtonGroup OverrideStyles="false">
                                <MudButton Color="Color.Primary"
                                           Variant="@(_deal.Terms.PolicyDurationInMonthsForBusinessWarranties == 24 ? Variant.Filled : Variant.Outlined)"
                                           OnClick="@(() => _deal.Terms.PolicyDurationInMonthsForBusinessWarranties = 24)">
                                    24
                                </MudButton>
                                <MudButton Color="Color.Primary"
                                           Variant="@(_deal.Terms.PolicyDurationInMonthsForBusinessWarranties == 36 ? Variant.Filled : Variant.Outlined)"
                                           OnClick="@(() => _deal.Terms.PolicyDurationInMonthsForBusinessWarranties = 36)">
                                    36
                                </MudButton>
                            </MudButtonGroup>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="4">
                            <MudText>Policy duration for fundamental warranties (months)</MudText>
                        </MudItem>
                        <MudItem xs="4">
                            <MudButtonGroup OverrideStyles="false">
                                <MudButton Color="Color.Primary"
                                           Variant="@(_deal.Terms.PolicyDurationInMonthsForFundamentalWarranties == 84 ? Variant.Filled : Variant.Outlined)"
                                           OnClick="@(() => _deal.Terms.PolicyDurationInMonthsForFundamentalWarranties = 84)">
                                    84
                                </MudButton>
                                <MudButton Color="Color.Primary"
                                           Variant="@(_deal.Terms.PolicyDurationInMonthsForFundamentalWarranties == 120 ? Variant.Filled : Variant.Outlined)"
                                           OnClick="@(() => _deal.Terms.PolicyDurationInMonthsForFundamentalWarranties = 120)">
                                    120
                                </MudButton>
                            </MudButtonGroup>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="4">
                            <MudText>Policy duration for (potential tax warranties and) the Tax Idemnity (months)</MudText>
                        </MudItem>
                        <MudItem xs="4">
                            <MudButtonGroup OverrideStyles="false">
                                <MudButton Color="Color.Primary"
                                           Variant="@(_deal.Terms.PolicyDurationInMonthsForTaxIdemnity == 84 ? Variant.Filled : Variant.Outlined)"
                                           OnClick="@(() => _deal.Terms.PolicyDurationInMonthsForTaxIdemnity = 84)">
                                    84
                                </MudButton>
                                <MudButton Color="Color.Primary"
                                           Variant="@(_deal.Terms.PolicyDurationInMonthsForTaxIdemnity == 120 ? Variant.Filled : Variant.Outlined)"
                                           OnClick="@(() => _deal.Terms.PolicyDurationInMonthsForTaxIdemnity = 120)">
                                    120
                                </MudButton>
                            </MudButtonGroup>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                    </MudGrid>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Text="Advisors">
                <TabContent>
                    <MudText Typo="Typo.body2">Advisors</MudText>
                </TabContent>
                <ChildContent>
                    <MudGrid Class="mt-6 mb-10">
                        <MudItem xs="8">
                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body1" Style="font-weight: 700" Class="ml-2">Advisors for the buy-side</MudText>
                                <MudFab Color="Color.Primary"
                                        StartIcon="@Icons.Outlined.Add"
                                        Size="Size.Small"
                                        OnClick="@(() => OpenAddAdvisorDialog(_deal.Terms.BuySideAdvisors))" />
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="1" />
                        <MudItem xs="7">
                            @foreach (var advisor in _deal.Terms.BuySideAdvisors)
                                    {
                                        <MudTextField @bind-Value="@advisor.Name"
                                          Variant="Variant.Outlined"
                                          Immediate
                                          Clearable
                                          Label="@advisor.Type"
                                          Class="mb-4" />
                                    }
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="8">
                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body1" Style="font-weight: 700" Class="ml-2">Advisors for the sell-side</MudText>
                                <MudFab Color="Color.Primary"
                                StartIcon="@Icons.Outlined.Add"
                                Size="Size.Small"
                                OnClick="@(() => OpenAddAdvisorDialog(_deal.Terms.SellSideAdvisors))" />
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="1" />
                        <MudItem xs="7">
                            @foreach (var advisor in _deal.Terms.SellSideAdvisors)
                            {
                                <MudTextField @bind-Value="@advisor.Name"
                                    Variant="Variant.Outlined"
                                    Immediate
                                    Clearable
                                    Label="@advisor.Type"
                                    Class="mb-4" />
                            }
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                    </MudGrid>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Text="Timing">
                <TabContent>
                    <MudText Typo="Typo.body2">Timing</MudText>
                </TabContent>
                <ChildContent>
                    <MudGrid Class="mt-6 mb-10">
                        <MudItem xs="3">
                            <MudText Typo="Typo.body1" Class="pt-6">Indicative/Final bid planned for</MudText>
                        </MudItem>
                        <MudItem xs="3">
                            <MudDatePicker Label="Editable with Placeholder" Editable @bind-Date="_deal.Terms.BidDate" Placeholder="Select Date" />
                        </MudItem>
                        <MudItem xs="6" />@*Grid line filler*@
                        <MudItem xs="3">
                            <MudText Typo="Typo.body1" Class="pt-6">Signing planned for</MudText>
                        </MudItem>
                        <MudItem xs="3">
                            <MudDatePicker Label="Editable with Placeholder" Editable @bind-Date="_deal.Terms.SigningDate" Placeholder="Select Date" />
                        </MudItem>
                        <MudItem xs="6" />@*Grid line filler*@
                        <MudItem xs="3">
                            <MudText Typo="Typo.body1" Class="pt-6">Final policy planned for</MudText>
                        </MudItem>
                        <MudItem xs="3">
                            <MudDatePicker Label="Editable with Placeholder" Editable @bind-Date="_deal.Terms.FinalPolicyDate" Placeholder="Select Date" />
                        </MudItem>
                        <MudItem xs="6" />@*Grid line filler*@
                    </MudGrid>
                </ChildContent>
                </MudTabPanel>
            <MudTabPanel Text="Transaction Documents">
                <TabContent>
                    <MudText Typo="Typo.body2">Transaction Documents</MudText>
                </TabContent>
                <ChildContent>
                    <MudGrid Class="mt-6 mb-10">
                        <MudItem xs="4">
                            <DragNDropFileUpload Label="Sales & Purchase Agreement (pdf, docx)"
                                            @bind-Deal="@_deal"
                                            FileType="FileType.SPA" />
                        </MudItem>
                        <MudItem xs="4">
                            <DragNDropFileUpload Label="(Optionally separate) Warranties (pdf, docx)"
                                            @bind-Deal="@_deal"
                                            FileType="FileType.Warranties" />
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="4">
                            <DragNDropFileUpload Label="Information Memorandum (pdf, docx)"
                                            @bind-Deal="@_deal"
                                            FileType="FileType.IM" />
                        </MudItem>
                        <MudItem xs="4">
                            <DragNDropFileUpload Label="Non Disclosure Agreement (pdf, docx)"
                                            @bind-Deal="@_deal"
                                            FileType="FileType.NDA" />
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="8">
                            <MudTable 
                                Items="@_deal.Files" 
                                Hover 
                                Breakpoint="Breakpoint.Sm" 
                                Elevation="0"
                                Dense
                                GroupBy="@_filesTableGroupDefinition"
                                GroupFooterClass="mb-4">
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Type</MudTh>
                                    <MudTh>Last Update</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>
                                 <GroupHeaderTemplate>
                                    <MudTh Style="background-color:var(--mud-palette-background-grey); font-weight: 600; line-height: 0.2;" colspan="4">
                                        @context.Key
                                    </MudTh>
                                </GroupHeaderTemplate>
                                <RowTemplate>
                                    <MudTd DataLabel="Name">@context.FileName</MudTd>
                                    <MudTd DataLabel="Type">@context.Type.ToString()</MudTd>
                                    <MudTd DataLabel="LastModified">@(context.LastModified.ToLocalTime().ToString("g") + " " + Thread.CurrentThread.CurrentCulture.Name)</MudTd>
                                    <MudTd DataLabel="Actions">
                                        <MudTooltip Delay="1000" Duration="1000" Text="Delete">
                                            <MudIconButton Icon="@Icons.Outlined.Delete" aria-label="Delete" OnClick="() => DeleteFile(context.Id)" />
                                        </MudTooltip>
                                        <MudTooltip Delay="1000" Duration="1000" Text="Download">
                                            <MudIconButton Icon="@Icons.Outlined.Download" aria-label="Download" OnClick="() => DownloadFile(context)" />
                                        </MudTooltip>                                        
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </ChildContent>
            </MudTabPanel>
        </MudTabs>
    }
    else if (_visibleTab == "pricing")
    {
        @if (_calculating)
        {
            <div class="d-flex justify-center">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate />
            </div>
        }
        else if (_deal.Pricing.EnterpriseValue.Amount > 0)
        {
            <MudGrid Class="mt-4 mb-8">
                <MudItem xs="4">
                    <MudNumericField @bind-Value="@_amount"
                         T="decimal"
                         Variant="Variant.Outlined"
                         Format="0.##"
                         Min="0"
                         HideSpinButtons
                         Clearable
                         Immediate
                         Label="Enterprise Value amount" />
                </MudItem>
                <MudItem xs="4">
                    <MudSelect T="Currency"
                           ValueChanged="ChangedCurrency"
                           Variant="Variant.Outlined"
                           Label="Currency">
                        @foreach (Currency item in Enum.GetValues(typeof(Currency)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4" />@*Grid line filler*@
                <MudItem xs="2">
                    <MudInceptedButton Label="Calculate"
                           IsPrimary
                           Disabled="@(_amount == _deal.Pricing.EnterpriseValue.Amount)"
                           OnClickCallback="@(() => CalculatePricing())">
                        Re-Calculate
                    </MudInceptedButton>
                </MudItem>
                <MudItem xs="10" />@*Grid line filler*@
                <MudItem xs="8">
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudText Typo="Typo.h6" Class="mt-4">Limits of liability</MudText>
                        <MudFab Color="Color.Primary"
                    StartIcon="@Icons.Outlined.Edit"
                    Size="Size.Small"
                    OnClick="OpenPricingOptionsDialog" />
                    </MudStack>
                </MudItem>
                <MudItem xs="4" />@*Grid line filler*@
                @for (int i = 0; i < _deal.Pricing.Limits.Count(); i++)
                {
                    var limit = _deal.Pricing.Limits[i];
                    if ((i + 1) % 3 == 0)
                    {
                        <MudItem xs="4" />
                        @*Grid line filler*@
                    }
                    <MudItem xs="4">
                        <MudCard Elevation="3">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6" Style="@(limit.Enabled ? "color: var(--mud-palette-text-primary)" : "color: var(--mud-palette-text-disabled)")">
                                        @limit.ToString() % of EV &#8594; @limit.ToAmountString(_deal.Pricing.EnterpriseValue)
                                    </MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                        </MudCard>
                    </MudItem>
                }
                <MudItem xs="8">
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudText Typo="Typo.h6" Class="mt-4">Retention</MudText>
                        <MudFab Color="Color.Primary"
                    StartIcon="@Icons.Outlined.Edit"
                    Size="Size.Small"
                    OnClick="OpenPricingOptionsDialog" />
                    </MudStack>
                </MudItem>
                <MudItem xs="4" />@*Grid line filler*@
                @for (int i = 0; i < _deal.Pricing.Retentions.Count(); i++)
                {
                    var retention = _deal.Pricing.Retentions[i];
                    if ((i + 1) % 3 == 0)
                    {
                        <MudItem xs="4" />
                        @*Grid line filler*@
                    }
                    <MudItem xs="4">
                        <MudCard Elevation="3">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6" Style="@(retention.Enabled ? "color: var(--mud-palette-text-primary)" : "color: var(--mud-palette-text-disabled)")">
                                        @retention.ToString() % of EV &#8594; @retention.ToAmountString(_deal.Pricing.EnterpriseValue)
                                    </MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="mt-6">
                <MudText Typo="Typo.h5" Color="Color.Primary" Style="font-weight: 600">Pick an Enterprise Value to get started</MudText>
                <MudStack Row Class="mt-6">
                    <MudNumericField @bind-Value="@_amount"
                         T="decimal"
                         Variant="Variant.Outlined"
                         Format="0.##"
                         Min="0"
                         HideSpinButtons
                         Clearable
                         Label="Enterprise Value amount" />
                    <MudSelect @bind-Value="@_currency"
                   Variant="Variant.Outlined"
                   Label="Currency">
                        @foreach (Currency item in Enum.GetValues(typeof(Currency)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
                <MudInceptedButton Label="Calculate"
                                   IsPrimary
                                   Disabled="@(_amount == 0)"
                                   OnClickCallback="@(() => CalculatePricing())">
                    Calculate
                </MudInceptedButton>
            </MudStack>
        }
    }
    else if (_visibleTab == "enhancements")
    {
        <MudTabs Elevation="0" Class="mt-4 mb-8">
            <MudTabPanel Text="Requests">
                <TabContent>
                    <MudText Typo="Typo.body2">Requests</MudText>
                </TabContent>
                <ChildContent>
                    <MudText Typo="Typo.body1" Class="mt-6">Let insurers know about any general or deal specific requests you may have. Selected ones will be included in the submission.</MudText>
                    <MudText Typo="Typo.body2">You can add more but to edit the default ones go to your <MudLink Href="/settings" Typo="Typo.body2">account settings</MudLink>.</MudText>
                    <MudGrid Class="mt-6">
                        <MudItem xs="8">
                            <MudStack Row AlignItems="AlignItems.Baseline" Justify="Justify.FlexEnd">
                                <MudSwitch CheckedChanged="(bool val) => ToggleAllEnhancements(val)" Label="Select all" Color="Color.Primary" UnCheckedColor="Color.Default" />
                                <MudFab Color="Color.Primary"
                                StartIcon="@Icons.Outlined.Add"
                                Size="Size.Small"
                                OnClick="@(() => OpenAddEnhancementDialog(EnhancementType.Request))" />
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="8">
                            <MudExpansionPanels>
                                @foreach (var enhancement in _enhancements.Where(e => e.Type == EnhancementType.Request))
                                {
                                    <MudExpansionPanel>
                                        <TitleContent>
                                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                                <MudText Typo="Typo.h6">@enhancement.Title</MudText>
                                                <div @onclick:stopPropagation class="d-flex align-center gap-4">                                                    
                                                    <MudSwitch Checked="enhancement.BrokerRequestsIt" CheckedChanged="(bool val) => ToggleSingleEnhancement(enhancement, val)" Color="Color.Primary" UnCheckedColor="Color.Default" />
                                                </div>
                                            </MudStack>
                                        </TitleContent>
                                        <ChildContent>
                                            <b>Description</b>
                                            <br>
                                            @enhancement.Description                                            
                                        </ChildContent>
                                    </MudExpansionPanel>
                                }
                            </MudExpansionPanels>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                    </MudGrid>
                </ChildContent>
            </MudTabPanel>
            <MudTabPanel Text="Assumptions">
                <TabContent>
                    <MudText Typo="Typo.body2">Assumptions</MudText>
                </TabContent>
                <ChildContent>
                    <MudText Typo="Typo.body1" Class="mt-6">Do you have any assymptions? Let the insurers know which ones.</MudText>
                    <MudText Typo="Typo.body2">You can add more but to edit the default ones go to your <MudLink Href="/settings" Typo="Typo.body2">account settings</MudLink>.</MudText>
                    <MudGrid Class="mt-6">
                        <MudItem xs="8">
                            <MudStack Row AlignItems="AlignItems.Baseline" Justify="Justify.FlexEnd">
                                <MudSwitch CheckedChanged="(bool val) => ToggleAllEnhancements(val)" Label="Select all" Color="Color.Primary" UnCheckedColor="Color.Default" />
                                <MudFab Color="Color.Primary"
                                StartIcon="@Icons.Outlined.Add"
                                Size="Size.Small"
                                OnClick="@(() => OpenAddEnhancementDialog(EnhancementType.Assumption))" />
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                        <MudItem xs="8">
                            <MudExpansionPanels>
                                @foreach (var enhancement in _enhancements.Where(e => e.Type == EnhancementType.Assumption))
                                {
                                    <MudExpansionPanel>
                                        <TitleContent>
                                            <MudStack Row AlignItems="AlignItems.Baseline" Justify="Justify.SpaceBetween">
                                                <MudText>@enhancement.Title</MudText>
                                                <div @onclick:stopPropagation>
                                                    <MudSwitch Checked="enhancement.BrokerRequestsIt" CheckedChanged="(bool val) => ToggleSingleEnhancement(enhancement, val)" Color="Color.Primary" UnCheckedColor="Color.Default" />
                                                </div>
                                            </MudStack>
                                        </TitleContent>
                                        <ChildContent>@enhancement.Description</ChildContent>
                                    </MudExpansionPanel>
                                }
                            </MudExpansionPanels>
                        </MudItem>
                        <MudItem xs="4" />@*Grid line filler*@
                    </MudGrid>
                </ChildContent>
            </MudTabPanel>
        </MudTabs>
    }
    else if (_visibleTab == "warranties")
    {
        <MudGrid Class="mt-6 mb-8">
            <MudItem xs="8">
                <MudTimeline TimelinePosition="TimelinePosition.Start">
                    <MudTimelineItem Color="Color.Primary">
                        <MudText Typo="Typo.body1" Class="mb-2">Download the warranties template (it's a .csv).</MudText>
                        <MudInceptedButton OnClickCallback="DownloadWarrantiesTemplate">Download</MudInceptedButton>
                    </MudTimelineItem>
                    <MudTimelineItem Color="Color.Primary">
                        <MudText Typo="Typo.body1">There is only one column. Add a line per warranty with a reference to the numbering in 
                            the SPA and optionally a few words. The insurer will be able to download the SPA for reference when they 
                            provide feedback. Please keep the order the same as in the SPA so that the cross referencing is easier.</MudText>
                    </MudTimelineItem>
                    <MudTimelineItem Color="Color.Primary">
                        <MudText Typo="Typo.body1">Upload the filled in template file.</MudText>
                        <DragNDropFileUpload @bind-Deal="@_deal" FileType="FileType.WarrantyCsv" />
                    </MudTimelineItem>
                </MudTimeline>
            </MudItem>
            <MudItem xs="4" />@*Grid line filler*@
        
        @if (_deal.Warranties.Any())
        {
            <MudItem xs="8">
                <MudTable 
                    Items="@_deal.Warranties" 
                    Hover 
                    Breakpoint="Breakpoint.Sm" 
                    Elevation="0"
                    Dense
                    Class="mt-6">
                    <HeaderContent>
                        <MudTh>Order</MudTh>
                        <MudTh>Uploaded warranty references and descriptions</MudTh>
                    </HeaderContent>                    
                    <RowTemplate>
                        <MudTd DataLabel="Order">@context.Order</MudTd>
                        <MudTd DataLabel="Reference">@context.Description</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
            <MudItem xs="4" />@*Grid line filler*@
        }
        else
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h4" Class="mt-6">No warranties uploaded yet</MudText>
            </MudItem>
        }
        </MudGrid>
    }

    <MudFab Color="Color.Primary"
        StartIcon="@Icons.Outlined.EditNote"
        OnClick="OpenEditNotesDialog"
        Label="Notes"
        Size="Size.Small"
        Style="position: fixed; bottom: 110px; right:40px" />

    <MudFab Color="Color.Primary"
        StartIcon="@Icons.Outlined.Save"
        OnClick="SaveDeal"
        Label="@(_saving ? "Saving..." : "Save")"
        Disabled="@(!IsDealChanged() || _saving || _loading)"
        Style="position: fixed; bottom: 40px; right:40px" />
}


@code {
    [Parameter] public Guid DealId { get; set; }

    private DealSubmissionDTO _deal = DealSubmissionDTO.Factory.Empty;
    private string _visibleTab = "terms";
    private TableGroupDefinition<FileDTO> _filesTableGroupDefinition = new()
        {
            GroupName = "GroupFilesOfDealByType",
            Indentation = false,
            Expandable = false,
            Selector = (d) => d.Type
        };

    //tracking of changes
    private CompareLogic _compareLogic = new CompareLogic();
    private DealSubmissionDTO? _currentlySavedDeal = DealSubmissionDTO.Factory.Empty;

    //data copies for the UI bc the DTOs are init-prop records
    private decimal _amount;
    private Currency _currency;
    private List<Enhancement> _enhancements = new();

    //page statuses
    private bool _calculating;
    private bool _hasError = false;
    private bool _saving = false;
    private bool _loading => (_deal == null || _deal.Id == Guid.Empty) && !_hasError;

    private Color GetButtonColor(string button) => _visibleTab == button ? Color.Primary : Color.Default;
    private string GetButtonBackGroundColor(string button) => _visibleTab == button ? "background-color: var(--mud-palette-primary-hover)" : "";

    protected override async Task OnInitializedAsync()
    {
        (await Http
            .GetFromApiAsync<DealSubmissionDTO>(
                path: $"api/v1/deals/{DealId}",
                Snackbar
            ))
            .Match(
                some: deal =>
                {
                    _deal = deal;
                    _currentlySavedDeal = _deal.DeepClone();

                    _enhancements = _deal.Enhancements.ToList();
                    _amount = _deal.Pricing.EnterpriseValue.Amount;
                    _currency = _deal.Pricing.EnterpriseValue.Currency;
                },
                none: () => _hasError = true
            );
    }

    private async Task SaveDeal()
    {
        if (!IsDealChanged()) return;

        _saving = true;

        _deal = _deal with { Enhancements = _enhancements.ToImmutable() };
 
        (await Http
            .PutToApiAsync(
                path: $"api/v1/deals",
                _deal,
                Snackbar
            ))
            .MatchSome(_ => {
                _currentlySavedDeal = _deal.DeepClone();
                Snackbar.Add("Deal saved!", Severity.Success);
            });

        _saving = false;
    }

    private bool IsDealChanged()
    {
        _deal = _deal with { Enhancements = _enhancements.ToImmutable() };

        return !_compareLogic.Compare(_deal, _currentlySavedDeal).AreEqual;
    }

    private async Task OpenAssignDialog()
    {
        var parameters = new DialogParameters { ["DealId"] = _deal.Id, ["Assignees"] = ImmutableList.CreateRange(_deal.Assignees) };
        var options = new MudFormDialogControls().DefaultDialogOptions;

        var dialog = DialogService.Show<EditAssigneesDialog>("Assign people to the deal", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            _deal = _deal with { Assignees = ((IEnumerable<EmployeeDTO>)result.Data).ToImmutable() };
        }
    }

    private async Task OpenSubmitDealDialog()
    {
        var parameters = new DialogParameters 
        { 
            ["DealId"] = _deal.Id, 
            ["SelectedDeadline"] = _deal.SubmissionDeadline == null ? null : _deal.SubmissionDeadline.Value.DateTime,
            ["SelectedInsurerCompanies"] = _deal.InsurerFeedbacks.Select(f => f.InsurerId),
            ["HasUnsavedChanges"] = IsDealChanged(),
            ["IsSubmittedToInsurers"] = _deal.IsSubmittedToInsurers
        };
        var options = new MudFormDialogControls().DefaultDialogOptions;

        var dialog = DialogService.Show<SubmitDealDialog>("Submit Deal", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && result.Data != null)
        {
            _deal = _deal with 
            { 
                SubmissionDeadline = ((SubmitDealDTO)result.Data).SubmissionDeadline,
                InsurerFeedbacks = ((SubmitDealDTO)result.Data).InsurersToSubmitTo.Select(insurer => (insurer.Id, Guid.Empty)).ToImmutable()  //we do not return the feedback ids from this dialog, they are not needed here and will be returned in the next GET of the submission
            };
        }
    }

    private async Task OpenEditNotesDialog()
    {
        var parameters = new DialogParameters { ["Type"] = "Notes", ["Value"] = _deal.Terms.Notes };
        var options = new MudFormDialogControls().DefaultDialogOptions;

        var dialog = DialogService.Show<EditNotesDialog>("Edit the notes of the deal", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            _deal.Terms.Notes = (string)result.Data;
        }
    }

    #region terms
    private Task<IEnumerable<string>> SearchIndustries(string value)
    {
        if (string.IsNullOrEmpty(value)) // if text is null or empty, show complete list
            return Task.FromResult(DealIndustries.Values.AsEnumerable());

        return Task.FromResult(DealIndustries.Values.Where(a => a.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    private async Task OpenAddAdvisorDialog(List<DealAdvisor> advisors)
    {
        var options = new MudFormDialogControls().DefaultDialogOptions;

        var dialog = DialogService.Show<AddAdvisorDialog>("Add advisor", options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            advisors.Add((DealAdvisor)result.Data);
        }
    }

    private async Task DeleteFile(Guid fileId)
    {
        (await Http.DeleteFromApiAsync($"api/v1/deals/{_deal.Id}/file/{fileId}", Snackbar))
            .MatchSome(_ =>
            {
                var newFileList = _deal.Files.Where(f => f.Id != fileId);

                _deal = _deal with { Files = newFileList.ToImmutable() };
            });
    }

    private async Task DownloadFile(FileDTO file) => await DealFiles.DownloadFileAsync(_deal.Id, file);    
    #endregion

    #region pricing
    private async Task CalculatePricing()
    {
        _calculating = true;

        _deal = _deal with { Pricing = _deal.Pricing.SetEnterpriseValue(_amount, _currency) };

        await Task.Delay(800);
        _calculating = false;
    }

    private void ChangedCurrency(Currency currency) => 
        _deal = _deal with { Pricing = _deal.Pricing.SetEnterpriseValue(_amount, currency) };

    
    private async Task OpenPricingOptionsDialog()
    {
        var parameters = new DialogParameters { ["Limits"] = _deal.Pricing.Limits, ["Retentions"] = _deal.Pricing.Retentions };
        var options = new MudFormDialogControls().DefaultDialogOptions;

        var dialog = DialogService.Show<EditPricingOptionsDialog>("Edit pricing options", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            (List<Limit> newLimits, List<Retention> newRetentions) = ((List<Limit>, List<Retention>))result.Data;

            _deal.Pricing.SetLimits(newLimits)
                .FlatMap(pricing => pricing.SetRetentions(newRetentions))
                .Map(newPricing => _deal = _deal with { Pricing = newPricing })
                .MatchNone(error => Snackbar.Add(error.errors.name.First(), Severity.Error));
        }
    }
    #endregion

    #region enhancements
    private void ToggleAllEnhancements(bool value) => 
        _enhancements = _enhancements.Select(e => e.SetBrokerSelected(value)).ToList();

    private void ToggleSingleEnhancement(Enhancement enhancement, bool value) => 
        _enhancements.ReplaceInList(e => e.Title == enhancement.Title, enhancement.SetBrokerSelected(value));

    private async Task OpenAddEnhancementDialog(EnhancementType type)
    {
        var parameters = new DialogParameters { ["Type"] = type };
        var options = new MudFormDialogControls().DefaultDialogOptions;

        var dialog = DialogService.Show<AddEnhancementDialog>("Add enhancement", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            _enhancements.Insert(0, (Enhancement)result.Data);
        }
    }
    #endregion

    #region warranties
    private async Task DownloadWarrantiesTemplate()
    {
        var csvContent = "Warranty reference";
        
        await DealFiles.DownloadFileAsync(Encoding.ASCII.GetBytes(csvContent), "warranties_template.csv");
    }
    #endregion
}