@using Incepted.Client.Extensions
@using Incepted.Shared.DTOs

@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar


<MudDialog @bind-IsVisible="_dialogControls.IsVisible" Options="_dialogControls.DefaultDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Outlined.Add" Class="mr-3" /> Add a new project
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_dialogControls.Form" @bind-IsValid="@_dialogControls.ValidationSuccess">
            <MudTextField id="newDealName" @bind-Value="@_newDealName"
                          Variant="Variant.Outlined"
                          Immediate
                          Required
                          RequiredError="You must specify a new project name"
                          Label="New project name">
            </MudTextField>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton id="dialogCancel" OnClick="Cancel">Cancel</MudButton>
        <MudButton id="dialogSubmit" Disabled="@(!_dialogControls.ValidationSuccess || _dialogControls.Processing)" Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitNewDeal" Class="px-10">
            @if (_dialogControls.Processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate />
                <MudText Class="ms-2">Adding</MudText>
            }
            else
            {
                <MudText>Add</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private MudFormDialogControls _dialogControls = new();
    private string _newDealName = string.Empty;

    void Cancel() => MudDialog.Cancel();

    private async Task SubmitNewDeal()
    {
        _dialogControls.Processing = true;

        var payload = new CreateDealDTO(_newDealName);
        (await Http
            .PostToApiAsync(
                path: $"api/v1/deals",
                payload,
                Snackbar
            ))
            .MatchSome(async response => {
                var id = (await response.Content.ReadAsStringAsync()).Trim('"');
                Navigation.NavigateTo($"/your-submissions/{id}");
            });

        _dialogControls.Processing = false;        
    }
}